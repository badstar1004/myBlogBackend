<!-- PostMapper.xml -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.mapper.post.PostMapper">

  <select id="getPostById" parameterType="Long" resultType="com.example.demo.domain.Post">
    SELECT * FROM posts WHERE post_id = #{postId}
  </select>

  <select id="getAllPosts" resultType="com.example.demo.domain.Post">
    SELECT * FROM posts ORDER BY post_id
  </select>

  <!--  public 게시물  -->
  <select id="getPublicPosts" resultType="com.example.demo.dto.post.PostListDto">
    SELECT title, content, view_count FROM posts WHERE status = 'public'
  </select>

  <!--  userId 기준 postList  -->
  <select id="getPostByUserId" resultType="com.example.demo.domain.Post">
    SELECT * FROM posts WHERE user_id = #{userId}
  </select>

  <!--  상위 n개 게시물  -->
  <select id="getPostTop" resultType="com.example.demo.dto.post.PostTitleViewCountDto">
    SELECT title, view_count FROM posts ORDER BY view_count DESC FETCH FIRST 5 ROWS ONLY
  </select>

  <!-- categoryId 기준 게시물 조회 -->
  <select id="getPostByCategoryId" resultType="com.example.demo.domain.Post">
    SELECT P.* FROM posts P JOIN postcategories PC ON P.post_id = PC.post_id WHERE PC.category_id = #{categoryId}
  </select>

  <!-- userId 기준 게시물 조회 (IN) -->
  <select id="getPostInUserIds" resultType="com.example.demo.domain.Post">
    SELECT * FROM posts WHERE user_id IN
                              <foreach item="userId" collection="userIdList" open="(" separator="," close=")">
                                #{userId}
                              </foreach>
                        ORDER BY user_id
  </select>

  <!-- userId 기준 최근 게시물 조회 -->
  <select id="getUserPostRecent" resultType="com.example.demo.dto.post.PostTitleContentCreatedAtDto">
    SELECT title, content, created_at FROM posts WHERE user_id = #{userId} ORDER BY created_at DESC FETCH FIRST 3 ROWS ONLY
  </select>

  <!-- postId 기준 인기 게시물 조회 (IN) -->
  <select id="getPopularPostInPostIds" resultType="com.example.demo.dto.post.PostTitleViewCountDto">
    SELECT title, view_count FROM posts WHERE post_id IN
    <foreach item="postId" collection="postIdList" open="(" separator="," close=")">
      #{postId}
    </foreach>
    ORDER BY view_count DESC FETCH FIRST 1 ROWS ONLY
  </select>

  <!-- 한달 동안 작성된 게시물 조회 -->
  <select id="getPostPeriod" resultType="com.example.demo.dto.post.PostTitleCreatedAtDto">
    SELECT title, created_at FROM posts WHERE created_at >= (CURRENT_TIMESTAMP - INTERVAL '1' MONTH)
  </select>

  <!-- 게시판 페이징 조회 -->
  <select id="getPostsPaging" resultType="com.example.demo.domain.Post">
    SELECT *
      FROM posts
      <if test="sort != null and sort.size() > 0">
        ORDER BY
            <foreach item="s" collection="sort" separator=",">
                ${s} ${order[sort.indexOf(s)]}
            </foreach>
      </if>
      <if test="offset != null">
        OFFSET #{offset} ROWS
      </if>
      <if test="page != null" >
        FETCH NEXT #{page} ROWS ONLY
      </if>
  </select>

  <!-- 조회수 1증가 업데이트 -->
  <update id="updatePostViewCount" parameterType="long">
    UPDATE posts SET view_count = view_count + 1, updated_at = current_date WHERE post_id = #{postId}
  </update>

  <!-- postId 기준 조회 (IN) -->
  <select id="getPostInPostIds" resultType="com.example.demo.domain.Post">
    SELECT * FROM posts WHERE post_id IN
                              <foreach item="postId" collection="postIds" open="(" separator="," close=")">
                                #{postId}
                              </foreach>
  </select>

  <!-- status = public 으로 업데이트 -->
  <update id="updatePostStatusInPostIds" parameterType="long">
    UPDATE posts SET status = 'public', updated_at = current_date
     WHERE post_id IN
           <foreach item="postId" collection="postIds" open="(" separator="," close=")">
            #{postId}
           </foreach>
  </update>

  <!--  status 기준 postList  -->
  <select id="findPostIdsByStatus" resultType="com.example.demo.domain.Post">
    SELECT * FROM posts WHERE status = #{status}
  </select>

  <!-- postIds 기준 게시글 삭제 -->
  <delete id="deletePostInPostId" parameterType="Long">
    DELETE FROM posts WHERE post_id IN
                            <foreach item="postId" collection="postIds" open="(" separator="," close=")">
                                #{postId}
                            </foreach>
  </delete>


  <select id="getPostByViewCount" parameterType="com.example.demo.domain.Post">
    <![CDATA[
        SELECT * FROM posts WHERE view_count < 10
    ]]>
  </select>

  <delete id="deleteLowViewCount" >
    <![CDATA[
        DELETE FROM post WHERE view_count < 10
    ]]>
  </delete>

  <select id="getPostByDate" parameterType="String" resultType="com.example.demo.domain.Post">
    <![CDATA[
        SELECT * FROM posts WHERE created_at < TO_DATE(#{date})
    ]]>
  </select>



  <insert id="createPost" parameterType="com.example.demo.domain.Post" useGeneratedKeys="true" keyProperty="postId" keyColumn="POST_ID">
    INSERT INTO posts (user_id, title, content, status) VALUES (#{userId}, #{title}, #{content}, #{status})
  </insert>

  <update id="updatePost" parameterType="com.example.demo.domain.Post">
    UPDATE posts SET title = #{title}, content = #{content}, updated_at = current_date WHERE post_id = #{postId}
  </update>

  <delete id="deletePost" parameterType="Long">
    DELETE FROM posts WHERE post_id = #{postId}
  </delete>

  <!-- 1주 동안 가장 댓글이 많은 글 2개 -->
  <!-- 오라클 CLOB 타입 GROUP BY 안걸림 -> INNER JOIN 으로 처리 -->
  <select id="getMostCommentsPosts" resultType="com.example.demo.domain.Post">
    <![CDATA[
    SELECT p.post_id
         , p.user_id
         , p.title
         , p.CONTENT
         , p.view_count
         , p.status
         , p.IMAGE_URL
         , p.created_at
      FROM posts 	p
INNER JOIN (SELECT post_id
                 , comment_count
              FROM (SELECT p.post_id
                         , COUNT(c.comment_id) AS comment_count
                      FROM posts 			p
                 LEFT JOIN comments 		c
                        ON p.post_id 		= c.post_id
                     WHERE p.created_at 	>= SYSDATE - 7
                  GROUP BY p.post_id
                  ORDER BY COUNT(c.comment_id) DESC)
             WHERE ROWNUM <= 2)		SUB
        ON p.post_id 	= sub.post_id
  ORDER BY sub.comment_count DESC
    ]]>
  </select>

  <!-- 1주 동안 가장 조회수가 많은 글 4개 -->
  <!-- 오라클 CLOB 타입 GROUP BY 안걸림 -> INNER JOIN 으로 처리 -->
  <select id="getMostViewCountPosts" resultType="com.example.demo.domain.Post">
    <![CDATA[
    SELECT p.post_id
         , p.user_id
         , p.title
         , p.CONTENT
         , p.view_count
         , p.status
         , p.IMAGE_URL
         , p.created_at
      FROM posts 	p
INNER JOIN (SELECT post_id
                 , VIEW_COUNT
              FROM (SELECT post_id
                         , VIEW_COUNT
                      FROM posts
                  ORDER BY VIEW_COUNT DESC)
             WHERE ROWNUM <= 4)		SUB
        ON p.post_id 	= sub.post_id
  ORDER BY sub.VIEW_COUNT DESC
    ]]>
  </select>

</mapper>